library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "~/Projeto/source/clean_and_rarefy.R", local = TRUE)
load("phyloseqbacteria.rds")
setwd()
getwd()
source(file = "~/../source/clean_and_rarefy.R", local = TRUE)
load("../dados/raw/phyloseqfungo.rds")
#load("../dados/raw/phyloseqbacteria.rds")
#load("../dados/raw/phyloseqfungo.rds")
load("../dados/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "~/../source/clean_and_rarefy.R", local = TRUE)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "~/../source/clean_and_rarefy.R", local = TRUE)
load("~/../dados/raw/phyloseqfungo.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "~/../source/clean_and_rarefy.R", local = TRUE)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
#load("~/../dados/raw/phyloseqbacteria.rds")
#load("~/../dados/raw/phyloseqfungo.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
#load("../dados/raw/phyloseqbacteria.rds")
#load("../dados/raw/phyloseqfungo.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
load("../dados/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
load("../dados/raw/phyloseqbacteria.rds")
getwd()
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
load("~/home/Projeto/dados/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
load("~/home/gustavo/Projeto/dados/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("~/home/gustavo/Projeto")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("~/home/gustavo/Projeto")
getwd()
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("/home/gustavo/Projeto")
load("~/home/gustavo/Projeto/dados/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("/home/gustavo/Projeto")
load("/dados/raw/phyloseqbacteria.rds")
dados_fungo = readRDS("/dados/raw/phyloseqfungo.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("/home/gustavo/Projeto")
dados_bacteria = readRDS("/data/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("/home/gustavo/Projeto")
dados_bacteria = readRDS("~/data/raw/phyloseqbacteria.rds")
list.files("/dados/raw/")
list.files("/data/raw/")
list.files("data/raw/")
list.files("data")
list.files()
getwd()
setwd("/home/gustavo/Projeto")
getwd()
list.files()
list.files("data/raw/")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
setwd("/home/gustavo/Projeto")
dados_bacteria = readRDS("~/data/raw/phyloseqbacteria.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "../source/clean_and_rarefy.R", local = TRUE)
dados_bacteria = readRDS("~/data/raw/phyloseqbacteria.rds")
getwd()
getwd()
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
getwd()
dados_bacteria = readRDS("~/data/raw/phyloseqbacteria.rds")
dados_fungo = readRDS("data/raw/phyloseqfungo.rds")
source(file = "source/clean_and_rarefy.R", local = TRUE)
dados_fungo
library(MicrobiotaProcess)
library(phyloseq)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
source(file = "source/clean_and_rarefy.R", local = TRUE)
dados_bacteria = readRDS("data/raw/phyloseqbacteria.rds")
file.info("data/raw/phyloseqbacteria.rds")
dados_fungo = load("data/raw/phyloseqfungo.rds")
dados_fungo
load("data/raw/phyloseqbacteria.rds")
bacteria
return (ps.split)
# limpeza do phyloseq
clean <- function(full_ps){
library(phyloseq)
library(Biostrings)
colnames(tax_table(full_ps))<-c("Domain","Phylum","Class","Order","Family","Genus","Species") # corrige nome dos taxons
tax_table(full_ps)[, colnames(tax_table(full_ps))] <- gsub(tax_table(full_ps)[, colnames(tax_table(full_ps))], pattern = "D_[0-7]__", replacement = "") #limpa a tabela dos préfixos
full_ps <- subset_taxa(full_ps, Family != "Mitochondria" & Order != "Chloroplast") # remove mitocondrias e croroplastos da tabela
full_ps@sam_data$SampleType_Sites <- gsub("_Healthy","", full_ps@sam_data$SampleType_Sites) # corrige a coluna sites, removendo a informação de saude (redundante)
full_ps@sam_data$SampleType_Sites <- gsub("_SD","" ,full_ps@sam_data$SampleType_Sites)
full_ps@sam_data$SampleReads <- sample_sums(full_ps) # cria coluna de numero de reads nos metadados
set.seed(1412)
cov <- metagMisc::phyloseq_coverage(full_ps)
meta <- full_ps@sam_data
meta$SampleID <- rownames(meta)
a <- merge(data.frame(meta), as.data.frame(cov), by = "SampleID")
rownames(a) <- a$SampleID
a$SampleID <- NULL
a$SampleCoverage.x <- NULL
a$SampleCoverage.y <- NULL
full_ps@sam_data <- sample_data(a)
if(full_ps@tax_table[1,1] == "Bacteria"){ ##Gambiarra pq não ta dando pra colocar um argumento pra ser o numero de reads
full_ps.f <- subset_samples(full_ps, SampleReads > 1000 & SampleCoverage > 0.97)
}
if(full_ps@tax_table[1,1] != "Bacteria"){
for(i in c("k__","p__","c__","o__","f__","g__","s__")){
tax_table(full_ps)[, colnames(tax_table(full_ps))] <- gsub(tax_table(full_ps)[, colnames(tax_table(full_ps))], pattern = i, replacement = "")
}
full_ps <-subset_taxa(full_ps, full_ps@tax_table[,1] != "No blast hit" )
full_ps.f <- subset_samples(full_ps, SampleReads > 2500 & SampleCoverage > 0.97)
}
split1 <- metagMisc::phyloseq_sep_variable(full_ps.f, "SampleType_Sites")
split2 <- metagMisc::phyloseq_sep_variable(full_ps.f, "SampleType_Surface_Object")
ps.split <- split1[c("Floor","Wall", "Scalp", "Hand")]
ps.split$Object <- split2$Object
return (ps.split)
}
bac.split<- clean(bacteria)
fun.split<- clean(fungi)
bac.split<- clean(bacteria)
bac.split<- clean(bacteria)
fun.split<- clean(fungi)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(SpiecEasi)
library(igraph)
library(tidyverse)
source(file = "code/clean_fungi.R", local = TRUE)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
#source(file = "source/clean_and_rarefy.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
#bac.split <- clean(bacteria)
fun.split <- clean(fungi)
#bac.split <- clean(bacteria)
fun.split <- clean_fungi(fungi)
bac.split <- clean_bacteria(bacteria)
bac.split <- clean_bacteria(bacteria)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
bac.split <- clean_bacteria(bacteria)
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
bac.split <- clean_bacteria(bacteria)
fun.split <- clean_fungi(fungi)
bac.split <- clean_bacteria(bacteria)
fun.split <- clean_fungi(fungi)
bac.split
##Selecao do core
core = function(phyl, corte_prev = 0, corte_abund){
## Função para criar um core de taxa em um objeto phyloseq
## Transforma o objeto phyloseq para um formato composicional
phyl_compositional <- microbiome::transform(phyl, "compositional")
## Identifica as taxas principais com base nos cortes de abundância e prevalência
core_taxa <- core_members(phyl_compositional, detection = corte_abund, prevalence = corte_prev)
## Obtém a tabela de taxonomia das taxas identificadas como principais
taxonomy <- as.data.frame(tax_table(phyl_compositional))
core_taxa_id <- subset(taxonomy, rownames(taxonomy) %in% core_taxa)
## Exibe informações do objeto phyloseq original
print(phyl)
## Cria um novo objeto phyloseq contendo apenas as taxas principais identificadas
phyl_core = subset_taxa(phyl, taxa_names(phyl) %in% core.taxa)
## Retorna o novo objeto phyloseq com as taxas principais
return(phyl_core)
##Selecao do core
core = function(phyl, corte_prev = 0, corte_abund){
## Função para criar um core de taxa em um objeto phyloseq
## Transforma o objeto phyloseq para um formato composicional
phyl_compositional <- microbiome::transform(phyl, "compositional")
## Identifica as taxas principais com base nos cortes de abundância e prevalência
core_taxa <- core_members(phyl_compositional, detection = corte_abund, prevalence = corte_prev)
## Obtém a tabela de taxonomia das taxas identificadas como principais
taxonomy <- as.data.frame(tax_table(phyl_compositional))
core_taxa_id <- subset(taxonomy, rownames(taxonomy) %in% core_taxa)
## Exibe informações do objeto phyloseq original
print(phyl)
## Cria um novo objeto phyloseq contendo apenas as taxas principais identificadas
phyl_core = subset_taxa(phyl, taxa_names(phyl) %in% core.taxa)
## Retorna o novo objeto phyloseq com as taxas principais
return(phyl_core)
}
core.floor.bac <- core(phyl = bac.split$Floor, corte_abund = 0.01)
source(file = "source/core_bacteria.R", local = TRUE)
source(file = "source/core_fungi.R", local = TRUE)
core_floor_bac <- core(bac_split$Floor, corte_abund = 0.01)
bac_split <- clean_bacteria(bacteria)
fun_split <- clean_fungi(fungi)
core_floor_bac <- core(bac_split$Floor, corte_abund = 0.01)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.01)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.01)
source(file = "source/core_bacteria.R", local = TRUE)
source(file = "source/core_fungi.R", local = TRUE)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.01)
source(file = "source/core_bacteria.R", local = TRUE)
source(file = "source/core_fungi.R", local = TRUE)
source(file = "source/core_bacteria.R", local = TRUE)
source(file = "source/core_fungi.R", local = TRUE)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.01)
bacteria = bac_split
bacteria_compositional <- microbiome::transform(bacteria, "compositional")
bacteria
bacteria = bac_split$Floor
bacteria_compositional <- microbiome::transform(bacteria, "compositional")
core_taxa <- core_members(bacteria_compositional, detection = 0.1, prevalence = 0)
taxonomy <- as.data.frame(tax_table(bacteria_compositional))
core_taxa_id <- subset(taxonomy, rownames(taxonomy) %in% core_taxa)
bacteria_core = subset_taxa(bacteria, taxa_names(bacteria) %in% core_taxa)
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
bac_split <- clean_bacteria(bacteria)
fun_split <- clean_fungi(fungi)
source(file = "source/core_bacteria.R", local = TRUE)
source(file = "source/core_fungi.R", local = TRUE)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.01)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.1)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.01)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02, corte_prev = 0.1)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2, corte_prev = 0.1)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02, corte_prev = 0.1)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02, corte_prev = 0.5)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2, corte_prev = 0.5)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02, corte_prev = 0.5)
core_scalp_bac
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02, corte_prev = 0.5)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2, corte_prev = 0.5)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02, corte_prev = 0.1)
core_scalp_bac
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2, corte_prev = 0.1)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02, corte_prev = 0.1)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2, corte_prev = 0.1)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02, corte_prev = 0.1)
core_scalp_bac
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.02)
core_scalp_bac
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.0)
core_scalp_bac
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0.02)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0.2)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0.0)
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0)
core_scalp_bac
core_floor_bac <- core_bacteria(bac_split$Floor, corte_abund = 0)
core_wall_bac <- core_bacteria(bac_split$Wall, corte_abund = 0)
core_scalp_bac <- core_bacteria(bac_split$Scalp, corte_abund = 0)
core_scalp_bac
bac_split$Scalp
bacteria = bac_split$Scalp
bacteria_compositional <- microbiome::transform(bacteria, "compositional")
corte_abund = 0.1
core_taxa <- microbiome::core_members(bacteria_compositional, detection = corte_abund, prevalence = 0)
core_taxa
corte_abund = 0.5
core_taxa <- microbiome::core_members(bacteria_compositional, detection = corte_abund, prevalence = 0)
core_taxa
update.packages()
update.packages('phyloseq')
update.packages("phyloseq")
install.packages("phyloseq")
install.packages("phyloseq")
install.packages("phyloseq")
install.packages("phyloseq")
update.packages()
update.packages()
update.packages(ask = FALSE, checkBuilt = TRUE)
