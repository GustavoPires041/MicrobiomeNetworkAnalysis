core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 10)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.9)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.99)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.01)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.01)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.001)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.05)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.05)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.00)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
0,001 * 100
0.001 * 100
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.001)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.001)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.001)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.5, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.5, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 0.5, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 0.5, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 0.5, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 0.5, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 0.33, corte_abund = 0.0)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 0.33, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.001)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
core_floor_bac <- subset_taxa(bac_split$Floor, taxa_names(bac_split$Floor) %in% rownames(core_floor_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
library(tidyverse)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
taxa_names(floor$bac_healthy)
rownames(core_floor_bac_healthy)
subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
print(class(taxa_names(floor$bac_healthy)))   # Deve retornar "character"
print(class(rownames(core_floor_bac_healthy)))
floor$bac_healthy
taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
floor$bac_sd <- subset_taxa(floor$bac_sd, taxa_names(floor$bac_sd) %in% rownames(core_floor_bac_sd))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
wall$bac_healthy <- subset_taxa(wall$bac_healthy, taxa_names(wall$bac_healthy) %in% rownames(core_wall_bac_healthy))
floor$bac_sd <- subset_taxa(floor$bac_sd, taxa_names(floor$bac_sd) %in% rownames(core_floor_bac_sd))
scalp$bac_healthy <- subset_taxa(scalp$bac_healthy, taxa_names(scalp$bac_healthy) %in% rownames(core_scalp_bac_healthy))
scalp$bac_sd <- subset_taxa(scalp$bac_sd, taxa_names(scalp$bac_sd) %in% rownames(core_scalp_bac_sd))
core_wall_bac <- subset_taxa(bac_split$Wall, taxa_names(bac_split$Wall) %in% rownames(core_wall_bac))
print(class(floor$bac_healthy))
print(class(floor$bac_sd))
print(str(floor$bac_healthy))
print(str(wall$bac_healthy))
print(str(scalp$bac_healthy))
sum(is.na(taxa_names(floor$bac_healthy)))
sum(is.na(rownames(core_floor_bac_healthy)))
common_taxa <- taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
print(sum(common_taxa))
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
#setar diretório de trabalho para a pasta do projeto
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
#importação de bibliotecas
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
library(ggplot2)
#importar funções utilizadas
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
source(file = "source/core_bacteria.R", local = TRUE)
#importar dados brutos (já transformados em phyloseq antes)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
#limpar phyloseq
bac_split <- clean_pseq(bacteria)
fun_split <- clean_pseq(fungi)
#Filtrar só os locais de interesse
bac_split = bac_split[c("Floor","Scalp", "Wall")]
fun_split = fun_split[c("Floor","Scalp", "Wall")]
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(bac_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(bac_split)) {
describe_phyloseq(bac_split[[i]], nomes[i])
}
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(fun_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(fun_split)) {
describe_phyloseq(fun_split[[i]], nomes[i])
}
source(file = "source/equal_sample_number.R", local = TRUE)
floor = equal_sample_number(bac_split$Floor, fun_split$Floor)
wall = equal_sample_number(bac_split$Wall, fun_split$Wall)
scalp = equal_sample_number(bac_split$Scalp, fun_split$Scalp)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
#setar diretório de trabalho para a pasta do projeto
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
#importação de bibliotecas
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
library(ggplot2)
#importar funções utilizadas
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
source(file = "source/core_bacteria.R", local = TRUE)
#importar dados brutos (já transformados em phyloseq antes)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
#limpar phyloseq
bac_split <- clean_pseq(bacteria)
fun_split <- clean_pseq(fungi)
#Filtrar só os locais de interesse
bac_split = bac_split[c("Floor","Scalp", "Wall")]
fun_split = fun_split[c("Floor","Scalp", "Wall")]
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(bac_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(bac_split)) {
describe_phyloseq(bac_split[[i]], nomes[i])
}
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(fun_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(fun_split)) {
describe_phyloseq(fun_split[[i]], nomes[i])
}
source(file = "source/equal_sample_number.R", local = TRUE)
floor = equal_sample_number(bac_split$Floor, fun_split$Floor)
wall = equal_sample_number(bac_split$Wall, fun_split$Wall)
scalp = equal_sample_number(bac_split$Scalp, fun_split$Scalp)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy))
taxa_names(floor$bac_healthy)
taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
wall$bac_healthy <- subset_taxa(wall$bac_healthy, taxa_names(wall$bac_healthy) %in% rownames(core_wall_bac_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, a)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
a = taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, a)
floor$bac_healthy
#setar diretório de trabalho para a pasta do projeto
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
#importação de bibliotecas
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
library(ggplot2)
#importar funções utilizadas
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
source(file = "source/core_bacteria.R", local = TRUE)
#importar dados brutos (já transformados em phyloseq antes)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
#limpar phyloseq
bac_split <- clean_pseq(bacteria)
fun_split <- clean_pseq(fungi)
#Filtrar só os locais de interesse
bac_split = bac_split[c("Floor","Scalp", "Wall")]
fun_split = fun_split[c("Floor","Scalp", "Wall")]
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(bac_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(bac_split)) {
describe_phyloseq(bac_split[[i]], nomes[i])
}
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(fun_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(fun_split)) {
describe_phyloseq(fun_split[[i]], nomes[i])
}
source(file = "source/equal_sample_number.R", local = TRUE)
floor = equal_sample_number(bac_split$Floor, fun_split$Floor)
wall = equal_sample_number(bac_split$Wall, fun_split$Wall)
scalp = equal_sample_number(bac_split$Scalp, fun_split$Scalp)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
mask1 = taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, mask1)
mask2 = taxa_names(floor$bac_sd) %in% rownames(core_floor_bac_sd)
floor$bac_sd <- subset_taxa(floor$bac_sd, mask2)
wall$bac_healthy <- subset_taxa(wall$bac_healthy, taxa_names(wall$bac_healthy) %in% rownames(core_wall_bac_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
scalp$bac_healthy <- subset_taxa(scalp$bac_healthy, taxa_names(scalp$bac_healthy) %in% rownames(core_scalp_bac_healthy))
scalp$bac_sd <- subset_taxa(scalp$bac_sd, taxa_names(scalp$bac_sd) %in% rownames(core_scalp_bac_sd))
core_wall_bac <- subset_taxa(bac_split$Wall, taxa_names(bac_split$Wall) %in% rownames(core_wall_bac))
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
mask1 = taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, mask1)
mask2 = taxa_names(floor$bac_sd) %in% rownames(core_floor_bac_sd)
floor$bac_sd <- subset_taxa(floor$bac_sd, mask2)
wall$bac_healthy <- subset_taxa(wall$bac_healthy, taxa_names(wall$bac_healthy) %in% rownames(core_wall_bac_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
scalp$bac_healthy <- subset_taxa(scalp$bac_healthy, taxa_names(scalp$bac_healthy) %in% rownames(core_scalp_bac_healthy))
scalp$bac_sd <- subset_taxa(scalp$bac_sd, taxa_names(scalp$bac_sd) %in% rownames(core_scalp_bac_sd))
#selecionar os core members
core_floor_fun_healthy <- core(floor$fun_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_fun_sd <- core(floor$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_fun_healthy <- core(wall$fun_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_fun_sd <- core(wall$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_fun_healthy <- core(scalp$fun_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_fun_sd <- core(scalp$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
mask1 = taxa_names(floor$fun_healthy) %in% rownames(core_floor_fun_healthy)
floor$fun_healthy <- phyloseq::subset_taxa(floor$fun_healthy, mask1)
mask2 = taxa_names(floor$fun_sd) %in% rownames(core_floor_fun_sd)
floor$fun_sd <- subset_taxa(floor$fun_sd, mask2)
wall$fun_healthy <- subset_taxa(wall$fun_healthy, taxa_names(wall$fun_healthy) %in% rownames(core_wall_fun_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
scalp$fun_healthy <- subset_taxa(scalp$fun_healthy, taxa_names(scalp$fun_healthy) %in% rownames(core_scalp_fun_healthy))
scalp$fun_sd <- subset_taxa(scalp$fun_sd, taxa_names(scalp$fun_sd) %in% rownames(core_scalp_fun_sd))
#criar lista de objetos para exportação e exportar
pseq_core <- list(floor= floor,
wall = wall,
scalp = scalp )
source(file = "source/descrever_phyloseq_lista.R", local = TRUE)
# Utilizando a função para comparar os phyloseqs na lista e obter as estatísticas resumidas de abundância
#para bacteria
estatisticas_bac = cbind(descrever_phyloseqs_lista(bac_split),
descrever_phyloseqs_lista(pseq_core[c("floor_bac","wall_bac","scalp_bac")]))
pseq_core
pseq_core$floor$fun_sd
# Utilizando a função para comparar os phyloseqs na lista e obter as estatísticas resumidas de abundância
#para bacteria
estatisticas_bac = cbind(descrever_phyloseqs_lista(bac_split),
descrever_phyloseqs_lista(pseq_core[c("floor","wall","scalp")]))
#setar diretório de trabalho para a pasta do projeto
knitr::opts_knit$set(root.dir = '/home/gustavo/Projeto')
#importação de bibliotecas
library(microbiome)
library(MicrobiotaProcess)
library(phyloseq)
library(tidyverse)
library(Biostrings)
library(ggplot2)
#importar funções utilizadas
source(file = "source/clean_bacteria.R", local = TRUE)
source(file = "source/clean_fungi.R", local = TRUE)
source(file = "source/core_bacteria.R", local = TRUE)
#importar dados brutos (já transformados em phyloseq antes)
load("data/raw/phyloseqbacteria.rds")
load("data/raw/phyloseqfungo.rds")
#limpar phyloseq
bac_split <- clean_pseq(bacteria)
fun_split <- clean_pseq(fungi)
#Filtrar só os locais de interesse
bac_split = bac_split[c("Floor","Scalp", "Wall")]
fun_split = fun_split[c("Floor","Scalp", "Wall")]
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(bac_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(bac_split)) {
describe_phyloseq(bac_split[[i]], nomes[i])
}
source(file = "source/describe_phyloseq.R", local = TRUE)
# Aplica a função para cada objeto na lista e imprime as informações
nomes <- names(fun_split)  # Obtém os nomes dos objetos na lista
for (i in seq_along(fun_split)) {
describe_phyloseq(fun_split[[i]], nomes[i])
}
source(file = "source/equal_sample_number.R", local = TRUE)
floor = equal_sample_number(bac_split$Floor, fun_split$Floor)
wall = equal_sample_number(bac_split$Wall, fun_split$Wall)
scalp = equal_sample_number(bac_split$Scalp, fun_split$Scalp)
#selecionar os core members
source(file = "source/core_bacteria.R", local = TRUE)
core_floor_bac_healthy <- core(floor$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_bac_sd <- core(floor$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_healthy <- core(wall$bac_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_bac_sd <- core(wall$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_bac_healthy <- core(scalp$bac_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_bac_sd <- core(scalp$bac_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
mask1 = taxa_names(floor$bac_healthy) %in% rownames(core_floor_bac_healthy)
floor$bac_healthy <- phyloseq::subset_taxa(floor$bac_healthy, mask1)
mask2 = taxa_names(floor$bac_sd) %in% rownames(core_floor_bac_sd)
floor$bac_sd <- subset_taxa(floor$bac_sd, mask2)
wall$bac_healthy <- subset_taxa(wall$bac_healthy, taxa_names(wall$bac_healthy) %in% rownames(core_wall_bac_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
scalp$bac_healthy <- subset_taxa(scalp$bac_healthy, taxa_names(scalp$bac_healthy) %in% rownames(core_scalp_bac_healthy))
scalp$bac_sd <- subset_taxa(scalp$bac_sd, taxa_names(scalp$bac_sd) %in% rownames(core_scalp_bac_sd))
#selecionar os core members
core_floor_fun_healthy <- core(floor$fun_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_floor_fun_sd <- core(floor$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
core_wall_fun_healthy <- core(wall$fun_healthy, corte_prev = 1/3, corte_abund = 0.0)
core_wall_fun_sd <- core(wall$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
core_scalp_fun_healthy <- core(scalp$fun_healthy, corte_prev = 1/3, corte_abund = 0.00)
core_scalp_fun_sd <- core(scalp$fun_sd, corte_prev = 1/3, corte_abund = 0.0)
#filtrar os dados originais para manter apenas os core members no formato phyloseq
mask1 = taxa_names(floor$fun_healthy) %in% rownames(core_floor_fun_healthy)
floor$fun_healthy <- phyloseq::subset_taxa(floor$fun_healthy, mask1)
mask2 = taxa_names(floor$fun_sd) %in% rownames(core_floor_fun_sd)
floor$fun_sd <- subset_taxa(floor$fun_sd, mask2)
wall$fun_healthy <- subset_taxa(wall$fun_healthy, taxa_names(wall$fun_healthy) %in% rownames(core_wall_fun_healthy))
wall$bac_sd <- subset_taxa(wall$bac_sd, taxa_names(wall$bac_sd) %in% rownames(core_wall_bac_sd))
scalp$fun_healthy <- subset_taxa(scalp$fun_healthy, taxa_names(scalp$fun_healthy) %in% rownames(core_scalp_fun_healthy))
scalp$fun_sd <- subset_taxa(scalp$fun_sd, taxa_names(scalp$fun_sd) %in% rownames(core_scalp_fun_sd))
#criar lista de objetos para exportação e exportar
pseq_core <- list(floor= floor,
wall = wall,
scalp = scalp )
#salvar como objeto R na pasta de dados
save(pseq_core, file =  "data/processed/pseq_core14102024.rds")
